// Code generated by MockGen. DO NOT EDIT.
// Source: shorturlmodel_gen.go

// Package model is a generated GoMock package.
package model

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockshorturlModel is a mock of shorturlModel interface.
type MockshorturlModel struct {
	ctrl     *gomock.Controller
	recorder *MockshorturlModelMockRecorder
}

// MockshorturlModelMockRecorder is the mock recorder for MockshorturlModel.
type MockshorturlModelMockRecorder struct {
	mock *MockshorturlModel
}

// NewMockshorturlModel creates a new mock instance.
func NewMockshorturlModel(ctrl *gomock.Controller) *MockshorturlModel {
	mock := &MockshorturlModel{ctrl: ctrl}
	mock.recorder = &MockshorturlModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshorturlModel) EXPECT() *MockshorturlModelMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockshorturlModel) Delete(ctx context.Context, shorten string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, shorten)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockshorturlModelMockRecorder) Delete(ctx, shorten interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockshorturlModel)(nil).Delete), ctx, shorten)
}

// FindOne mocks base method.
func (m *MockshorturlModel) FindOne(ctx context.Context, shorten string) (*Shorturl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, shorten)
	ret0, _ := ret[0].(*Shorturl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockshorturlModelMockRecorder) FindOne(ctx, shorten interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockshorturlModel)(nil).FindOne), ctx, shorten)
}

// Insert mocks base method.
func (m *MockshorturlModel) Insert(ctx context.Context, data *Shorturl) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockshorturlModelMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockshorturlModel)(nil).Insert), ctx, data)
}

// Update mocks base method.
func (m *MockshorturlModel) Update(ctx context.Context, data *Shorturl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockshorturlModelMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockshorturlModel)(nil).Update), ctx, data)
}
